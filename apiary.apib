FORMAT: 1A
HOST: https://api-data.xxx.com



# XXX Data API
XXX Data API is the web service platform of XXX GROUP

Where applicable this API uses the [HAL+JSON](https://github.com/mikekelly/hal_specification/blob/master/hal_specification.md) media-type to represent resources states and affordances.

All dates are representated by [ISO_8601](http://en.wikipedia.org/wiki/ISO_8601)


## Authentication
Currently the API does not provide authenticated access.


## Error States
The common [HTTP Response Status Codes](https://github.com/for-GET/know-your-http-well/blob/master/status-codes.md) are used with error messages.
> HTTP Status Code: 403

> {"message":"Param Update Forbidden","code": 20003}

## Format & Version 
Format and Version must be put in HTTP Headers
> Accept: application/json;version=2

Format accepted are :

* XML
* JSON
* Messagepack 


## Entity & Link Expension
You can add `embedded` paramater to API to expand an entity or a link inside the API. For example 
> /programmes/13213?embedded=person,comments

add a reserved `_embedded` property inside response


## Relationsiphs
### To-Many Relationships
API provides a to-many relationship as an array of IDs MUST respond to a GET request with a list of the specified documents. You can add the key parameters `ids` and a comma-separated list of the specified IDs
> /comments?ids=5,12,17,20

## Partial Representation
You can add `fields` paramater to API to get only a partial information o f the API. For example 
> /persons/123465?fields=fname,lname

## Pagination
You can add `count` and `since_id` or `max_id` parameters to collection ressources. For example 
> /category/genre/movie?since_id=50&count=50

When pagination is available, next links are in models

> "_links": {

> "next": "/tickets?since_id=100&count=50"

> "previous": "/tickets?since_id=0&count=50"

> }
    

## Caching
API is compatible with Entity Tag `ETAG` and the request header `If-Modified-Since`

## Searching
Full text search is used as a mechanism of retrieving resource instances for a specific type of resource, it can be exposed on the API as a query parameter `q` on the resource's endpoint.
> /persons?q=Brad Pitt

## Sorting
parameter `sort` can be used to describe sorting rules. Accommodate complex sorting requirements by letting the sort parameter take in list of comma separated fields, each with a possible unary negative to imply descending sort order. Let's look at some examples:

> GET /programs?sort=-creationdate - Retrieves a list of programs in descending order of creation date

> GET /tickets?sort=-priority,created_at - Retrieves a list of tickets in descending order of priority. Within a specific priority, older tickets are ordered first

## Security
All resquests are only available with HTTPS protocol

All HTTP `POST` `PUT` `DELETE` Request must be signed and based on AWS Signature. You must have an `API KEY` and `API SECRET` credentials.
1. Sort request parameters alphabetically (e.g. foo=1, bar=2, baz=3 sorts to bar=2, baz=3, foo=1)

1. Percent encode every key and value that will be signed.

1. Separate the encoded parameter names from their encoded values with the equals sign ( = ) (ASCII character 61), even if the parameter value is empty.

1. Separate the name-value pairs with an ampersand ( & ) (ASCII character 38).

1. Create the string to sign according to the following pseudo-grammar (the "\n" represents an ASCII newline character).
> StringToSign = HTTPVerb + "\n" +
> ValueOfHostHeaderInLowercase + "\n" +
> HTTPRequestURI + "\n" +
> CanonicalizedQueryString

1. Include the signature parameter in the request encoded as lowercase HEX (e.g. signature=7431d31140cf412ab5caa73586d6324a)

1. Calculate an RFC 2104-compliant HMAC with the string you just created, your `API SECRET` as the key, and SHA256 or SHA1 as the hash algorithm.

1. Convert the resulting value to base64.

1. Use the resulting value as the value of the `signature` request parameter.

> /programmes?title=TitleText&apikey=13246545&signature=shjfd365g3sdf2gdsqfqs


# Group Category

## Content Category [/category/]

+ Model (application/hal+json)
    HAL+JSON representation of Category Resource. In addition to representing its state in the JSON form it offers affordances in the form of the HTTP Link header and HAL links.

    + Headers

            Location : /category

    + Body
    
            {
            "id": 42,
            "title": "drama",
            "description": "bla bla bla",
            
            "_links": {
                    "self": { "href": "/category/42" },
                    "parent": [
                        { "href": "/category/12", "title": "genre", level: "1"},
                        { "href": "/category/13", "title": "movie", level: "2"},
                    ],
                    "child" : [
                        { "href": "/category/52", "title": "comedy"},
                    ],
                }
            }


### Create a category [POST]

+ Response 200 (application/hal+json)

    [Content Category][] 

### List root category [GET]

+ Response 200 (application/hal+json)

        {
            "_links": [
                {
                    "href": "/category/42",
                    "title": "Drama"
                },
                {
                    "href": "/category/54",
                    "title": "tvshow"
                }
            ]
        }

## Content Category [/category/{id}] 
Categorization of content

Contents are categorized by theme, type and tags.



### [GET]
+ Parameters 
    + id (int) ... Category Id of a content

+ Response 200 (application/hal+json)

    [Content Category][]

### Update a category [PATCH]
+ Parameters 
    + id (int) ... Category ID.
    
+ Response 200 (application/hal+json)

    [Content Category][]

### Create a category [POST]

+ Response 200 (application/hal+json)

    [Content Category][]


### Delete a category [DELETE]

+ Response 204


# Group Programme
Group all programmes related ressources

Programme Model is bases on [BBC Programme Ontology](http://www.bbc.co.uk/ontologies/programmes/2009-09-07.shtml)

Programme Ontology covers brands, series (seasons) and episodes.


## Programme [/programmes]

+ Model (application/hal+json)
    HAL+JSON representation of Programme Resource. In addition to representing its state in the JSON form it offers affordances in the form of the HTTP Link header and HAL links.

    + Headers

            Location : /programmes

    + Body
    
            {
                "id": "42",
                "external-id": {
                    "tv": [
                        {
                            "title": "D8",
                            "numaff": 13245,
                            "numprog": 12345
                        }
                    ],
                    "vod": [
                        {
                            "title": "OCS",
                            "id": 132123
                        },
                        {
                            "title": "D8",
                            "id": 132123
                        }
                    ],
                    "vsod": [
                        {
                            "title": "CANALPLUS",
                            "id": 132123
                        }
                    ]
                },
                "diffusion": [
                    {
                        "epgid": 12,
                        "diffid": 12313,
                        "start": "1977-04-22T06:00:00Z",
                        "end": "1977-04-22T06:00:00Z"
                    }
                ],
                "version": "3",
                "created_at": "2014-04-14T02:15:15Z",
                "updated_at": "2014-04-14T02:15:15Z",
                "type": "brand",
                "title": [
                    {
                        "source": "web",
                        "data": "Breaking Bad"
                    }
                ],
                "subtitle": [
                    {
                        "source": "plurimedia",
                        "data": "Rattrapage de cours de Chimie, regarde !"
                    }
                ],
                "baseline": [
                    {
                        "source": "vod",
                        "data": "un professeur de chimie sur-qualifié et père de famille, qui, ayant appris qu'il est atteint d'un cancer du poumon à un stade avancé et pour assurer l'avenir financier de sa famille, sombre dans le crime en se lançant dans la fabrication et la vente de méthamphétamine, avec l'aide de l'un de ses anciens élèves, Jesse Pinkman"
                    }
                ],
                "description": [
                    {
                        "source": "vod",
                        "data": "Tu vas voir c'est cool !"
                    }
                ],
                "text": [
                    {
                        "source": "web",
                        "data": "Rita's ex-hubby, the crack addict, repeatedly raped her, knocked her around. Ever since then she's been completely uninterested in sex. That works for me! although a spare will do.Okay. Uh, is there something I can.. And I will. I can always see other people's problems more clearly than my own. Everyone hides who they are at least some of their time.Lightweight, uh... Harry Morgan, tonight's the night. It's going to happen again and again. Has to happen. Nice night. Miami is a great town. I'm drifting, but not to sleep, my father taught me one thing above all others; to be sure. And I am. Matt Chambers, Miami is your last stop. If God is in the details and if I believed in God, he's in this room with me. I just wish he had brought an extension cord."
                    }
                ],
                "_links": {
                    "self": {
                        "href": "/programmes/42"
                    },
                    "category": [
                        {
                            "href": "/category/12",
                            "title": "series"
                        },
                        {
                            "href": "/category/15",
                            "title": "drama"
                        }
                    ],
                    "persons": [
                        {
                            "href": "/persons/12",
                            "title": "Bryan Cranston",
                            "role": "actor"
                        },
                        {
                            "href": "/persons/13",
                            "title": "Aaron Paul",
                            "role": "actor"
                        },
                        {
                            "href": "/persons/14",
                            "title": "Vince Gilligan",
                            "role": "director"
                        }
                    ],
                    "images": [
                        {
                            "href": "/ressources/images/12",
                            "slug": "breaking-bad-labo",
                            "title": "Met labo",
                            "original": "1024x760"
                        },
                        {
                            "href": "/ressources/images/12",
                            "slug": "walter-white",
                            "title": "Walter White",
                            "original": "1024x760"
                        }
                    ],
                    "videos": [
                        {
                            "href": "/videos/free/12",
                            "title": "Bande annonce 1 VO"
                        },
                        {
                            "href": "/videos/free/12/selections/14",
                            "title": "Liste de selections Meteo de Doria"
                        }
                    ],
                    "versions": [
                        {
                            "href": "/programmes/42/versions/1",
                            "creator": "Guillaume Marchand",
                            "created_at": "1977-04-22T06:00:00Z"
                        }
                    ],
                    "brand": [
                        {
                            "href": "/programmes/50",
                            "title": "Breaking bad"
                        }
                    ],
                    "seasons": [
                        {
                            "href": "/programmes/50",
                            "title": "Saison 1"
                        },
                        {
                            "href": "/programmes/52",
                            "title": "Saison 2"
                        }
                    ],
                    "episodes": [
                        {
                            "href": "/programmes/52",
                            "title": "Episode 3"
                        }
                    ],
                    "articles": [
                        {
                            "Title": "Une Expo Breaking Bad à Paris",
                            "href": "/articles/22"
                        },
                        {
                        
                            "Title": "Une Expo Breaking Bad à Paris",
                            "href": "/articles/22"
                        }
                    ]
                    "_links.images.slug": {
                        "href": "http://media.canalplus.fr/{width}x{height}/{id}{?-SMART}.{ext}",
                        "templated": "true"
                    }
                },
                "movie": {
                    "lifecycle": "theater",
                    "production_year": "2012",
                    "_links": {
                        "characters": {
                            "href": "/characters/12",
                            "title": "Walter White"
                        },
                        "awards": {
                            "href": "/programmes/42/awards"
                        }
                    }
                }
            }

### Search [GET]
Retrieve a programme list via query search

+ Response 200

        {
            "_links": [
                {
                    "href": "/programmes/42",
                    "title": "La Météo de Doria du 15/10/2012"
                },
                {
                    "href": "/programmes/54",
                    "title": "Le Grand Journal"
                }
            ]
        }


### Create a programme [POST]

+ Response 200 (application/hal+json)

            [Programme][]
        

### Update a programme [PATCH]
Use of [RFC 6902](http://tools.ietf.org/html/rfc6902) to update an object

+ Request (application/json-patch+json)
    + Body
        
            [  {"replace": "/title[?(@.source=='web')]", "value": "Breaking Bad, La Série HBO"}]

+ Response 204 



## Channel List [/programmes/schedules/]
List of all Tv channels available

### [GET]
+ Response 200 (application/hal+json)
       
        {
            "epg": [
                {
                    "epgid": "123",
                    "title": "canalplus"
                },
                {
                    "epgid": "124",
                    "title": "canalplus cinema"
                }
            ]
        }


## TV programme schedule by day [/programmes/schedules/{epgid}{/date}] 
List all programmes of a particular day
### [GET]
+ Parameters 
    + epgid (int) ... ID of TV Channel.
    + date = `today` (optional,string,`1977-04-22`) ... ISO 8601 date to retrieve programmes of the day for.

+ Response 200 (application/hal+json)

        {
            "_links": [
                {
                    "href": "/programmes/42",
                    "title": "La Météo de Doria du 15/10/2012"
                },
                {
                    "href": "/programmes/54",
                    "title": "Le Grand Journal"
                }
            ]
        }



## Programmes [/programmes/{id}]
A single programme object
### Get a programme [GET] 
+ Parameters 
    + id (int) ... Programme ID.
    

+ Response 200 (application/hal+json)
       
    [Programme][]

### Update a programme [POST]
+ Parameters 
    + id (int) ... Programme ID.
    
+ Response 200 (application/hal+json)
       
    [Programme][]

### Delete a programme [DELETE]

+ Response 204
       

## Programmes [/programmes/progid={progid}]
A single programme object
### Get a programme [GET] 
+ Parameters 
    + progid (int) ... Programme ID.
    
+ Response 200 (application/hal+json)
       
    [Programme][]

## Programmes [/programmes/diffid={diffid}]
A single programme object
### Get a programme [GET] 
+ Parameters 
    + diffid (int) ... Programme ID.
    
+ Response 200 (application/hal+json)
       
     [Programme][]

## Programmes [/programmes/{id}/suggest]
Suggest links to this programm based on semantics 
### Get a programme [GET] 
+ Parameters 
    + id (int) ... Programme ID.
    
+ Response 200 (application/hal+json)
       
     [Programme][]
    + Body
    
            {
                "_links": {
                    "self": {
                        "href": "/programmes/42/suggest"
                    },
                    "category": [
                        {
                            "href": "/category/12",
                            "title": "series"
                        },
                        {
                            "href": "/category/15",
                            "title": "drama"
                        }
                    ],
                    "persons": [
                        {
                            "href": "/persons/12",
                            "title": "Bryan Cranston",
                            "role": "actor"
                        },
                        {
                            "href": "/persons/13",
                            "title": "Aaron Paul",
                            "role": "actor"
                        },
                        {
                            "href": "/persons/14",
                            "title": "Vince Gilligan",
                            "role": "director"
                        }
                    ],
                    "images": [
                        {
                            "href": "/ressources/images/12",
                            "slug": "breaking-bad-labo",
                            "title": "Met labo",
                            "original": "1024x760"
                        },
                        {
                            "href": "/ressources/images/12",
                            "slug": "walter-white",
                            "title": "Walter White",
                            "original": "1024x760"
                        }
                    ],
                    "videos": [
                        {
                            "href": "/videos/free/12",
                            "title": "Bande annonce 1 VO"
                        },
                        {
                            "href": "/videos/free/12/selections/14",
                            "title": "Liste de selections Meteo de Doria"
                        }
                    ],
                    "brand": [
                        {
                            "href": "/programmes/50",
                            "title": "Breaking bad"
                        }
                    ],
                    "seasons": [
                        {
                            "href": "/programmes/50",
                            "title": "Saison 1"
                        },
                        {
                            "href": "/programmes/52",
                            "title": "Saison 2"
                        }
                    ],
                    "episodes": [
                        {
                            "href": "/programmes/52",
                            "title": "Episode 3"
                        }
                    ],
                    "articles": {
                        "href": "/articles/22"
                    },
                    "_links.images.slug": {
                        "href": "http://media.canalplus.fr/{width}x{height}/{id}{?-SMART}.{ext}",
                        "templated": "true"
                    }
                }
            }



# Group Person
## Person [/persons]
+ Model (application/hal+json)
    HAL+JSON representation of Programme Resource. In addition to representing its state in the JSON form it offers affordances in the form of the HTTP Link header and HAL links.

    + Headers

            Location : /persons

    + Body
    
            {
                "id": "42",
                "version": "3",
                "created_at": "2014-04-14T02:15:15Z",
                "updated_at": "2014-04-14T02:15:15Z",
                "fname": "Brad",
                "lname": "Pitt",
                "surname": "Brad Pitt",
                "nationality": "American",
                "birthday": "",
                "birthcity": "",
                "deathday": "",
                "biography": "",
                "_links": {
                    "self": {
                        "href": "/persons/42"
                    },
                    "videos": {
                        "href": "/videos/42/"
                    },
                    "articles": {
                        "href": "/articles/42/articles"
                    },
                    "awards": {
                        "href": "/programmes/42/awards"
                    },
                    "social": [
                        {
                            "id": "twitter_account",
                            "href": "https://twitter.com/BradPittsPage"
                        },
                        {
                            "id": "facebook_fanpage",
                            "href": "https://www.facebook.com/Brad.Official.Page"
                        },
                        {
                            "id": "facebook_profilepage",
                            "href": "https://www.facebook.com/Brad.Official.Page"
                        }
                    ],
                    "images": [
                        {
                            "href": "/ressources/images/12",
                            "slug": "breaking-bad-labo",
                            "title": "Met labo",
                            "original": "1024x760"
                        },
                        {
                            "href": "/ressources/images/12",
                            "slug": "walter-white",
                            "title": "Walter White",
                            "original": "1024x760"
                        }
                    ],
                    "_link.images.slug": {
                        "href": "http://media.canalplus.fr/{width}x{height}/{slug}{?-SMART}.{ext}",
                        "templated": "true"
                    }
                }
            }

### List [GET] 

+ Response 200 (application/hal+json)
       
        {
            "_links": [
                {
                    "href": "/persons/42",
                    "title": "Brad Pitt"
                },
                {
                    "href": "/persons/44",
                    "title": "Jessica Biel"
                }
            ]
        }

### Create a person [POST]

+ Response 200 (application/hal+json)
    [Person][]


## Person [/persons/{id}]
A single person object
### Get [GET] 
+ Parameters 
    + id (int) ... person ID.
    
+ Response 200 (application/hal+json)
       
    [Person][]

### Update [POST]

+ Response 200 (application/hal+json)
    [Person][]

### Delete [DELETE]

+ Response 204


# Group Characters

## Character [/characters]

+ Model (application/hal+json)
    HAL+JSON representation of Programme Resource. In addition to representing its state in the JSON form it offers affordances in the form of the HTTP Link header and HAL links.

    + Headers

            Location : /characters

    + Body
    
            {
                "id": "42",
                "version": "3",
                "created_at": "2014-04-14T02:15:15Z",
                "updated_at": "2014-04-14T02:15:15Z",
                "fname": "Walter",
                "lname": "Walt",
                "description" : "Walter White a étudié à l'université California Institute of Technology avec Elliott Schwartz dans le domaine de la cristallographie1. 2. En 1985, les recherches de Walt concernant la radiographie contribuent à un projet qui reçoit le prix Nobel de chimie. Il cofonde par la suite la compagnie « Gray Matter Technologies » avec son ami Elliott Schwartz. Walter quitte ensuite son assistante de laboratoire, Gretchen. pendant les vacances avec sa famille, laissant tout derrière, son assistante et ses recherches. Gretchen se marie avec Elliott, et Gray Matter devient une entreprise couronnée de succès grâce aux recherches de Walt. Walter estime secrètement que son travail lui1 a été volé et blâme amèrement Elliott et Gretchen pour son sort.",
                "_links": {
                    "self": {
                        "href": "/characters/42"
                    },
                    "videos": {
                        "href": "/videos/42"
                    },
                    "social": [
                        {
                            "id": "twitter_account",
                            "href": "https://twitter.com/WalterWhite"
                        },
                        {
                            "id": "facebook_fanpage",
                            "href": "https://www.facebook.com/walterwhitepage"
                        },
                        {
                            "id": "facebook_profilepage",
                            "href": "https://www.facebook.com/walterwite"
                        }
                    ],
                    "_links.images.slug": {
                        "href": "http://media.canalplus.fr/{width}x{height}/{slug}{?-SMART}.{ext}",
                        "templated": "true"
                    }
                    "images": [
                    {
                        "href": "/ressources/images/12",
                        "slug": "breaking-bad-labo",
                        "title": "Met labo",
                        "original": "1024x760"
                    },
                    {
                        "href": "/ressources/images/12",
                        "slug": "walter-white",
                        "title": "Walter White",
                        "original": "1024x760"
                    }
                ],
                }
            }


### List [GET] 

+ Response 200 (application/hal+json)
       
        {
            "_links": [
                {
                    "href": "/characters/42",
                    "title": "Walter White"
                },
                {
                    "href": "/persons/44",
                    "title": "Olivia Pope"
                }
            ]
        }

### Create a person [POST]

+ Response 200 (application/hal+json)
    [Person][]

## Character [/characters/{id}]
A single character object

### Get [GET] 
+ Parameters 
    + id (int) ... character ID.
    
+ Response 200 (application/hal+json)
       
    [Character][]

### Update [POST]

+ Response 200 (application/hal+json)
       
    [Character][]

### Delete [DELETE]

+ Response 204


# Group Articles
## Article [/articles]
+ Model (application/hal+json)
    HAL+JSON representation of Article Resource. In addition to representing its state in the JSON form it offers affordances in the form of the HTTP Link header and HAL links.

    + Headers

            Location : /articles

    + Body
    
            {
                "id": "42",
                "version": "3",
                "created_at": "2014-04-14T02:15:15Z",
                "updated_at": "2014-04-14T02:15:15Z",
                "title": "AfterSchok, sacré meilleur film du monde",
                "text": "Zombies reversus ab inferno, nam malum cerebro. De carne animata corpora quaeritis. Summus sit​​, morbo vel maleficia? De Apocalypsi undead dictum mauris. Hi mortuis soulless creaturas, imo monstra adventus vultus comedat cerebella viventium. Qui offenderit rapto, terribilem incessu. The voodoo sacerdos suscitat mortuos comedere carnem. Search for solum oculi eorum defunctis cerebro. Nescio an Undead zombies. Sicut malus movie horror."
                "_links": {
                    "self": {
                        "href": "/programmes/42"
                    },
                    "videos": {
                        "href": "/programmes/videos/12"
                    },
                    "versions": [
                        {
                            "href": "/articles/42/versions/1",
                            "creator": "Guillaume Marchand",
                            "created_at": "1977-04-22T06:00:00Z"
                        }
                    ],
                    "images": [
                        {
                            "href": "/ressources/images/12",
                            "slug": "legrandjournal_20131225",
                            "alt": "Stromae au Grand Journal du 25/12/2013"
                        },
                        {
                            "href": "/ressources/images/12",
                            "slug": "legrandjournal_20131225",
                            "alt": "Stromae au Grand Journal du 25/12/2013"
                        }
                    ],
                    "_links.images.slug": {
                        "href": "http://media.canalplus.fr/{width}x{height}/{slug}{?-SMART}.{ext}",
                        "templated": "true"
                    }
                }
            }

### List [GET] 

+ Response 200 (application/hal+json)
       
        {
            "_links": [
                {
                    "href": "/articles/4531132",
                    "title": "La France perd la Coupe du Monde"
                },
                {
                    "href": "/articles/4531112",
                    "title": "Scary Movie gagne l'Oscar du Film 2013"
                }
            ]
        }

### Create a article [POST]

+ Response 200 (application/hal+json)
    
    [Article][]

## Article [/articles/{id}]
A single article object
### Get [GET] 
+ Parameters 
    + id (int) ... article ID.
    
+ Response 200 (application/hal+json)
       
    [Article][]

### Update [POST]

+ Response 200 (application/hal+json)
    
    [Article][]

### Delete [DELETE]

+ Response 204


# Group Video

## List [/videos/free/]
+ Response 200 (application/hal+json)
       
        {
            "_links": [
                {
                    "href": "/videos/4531132",
                    "title": "BA VO 1 de Zombieland"
                },
                {
                    "href": "/videos/4531112",
                    "title": "BA Scary Movie 32"
                }
            ]
        }

## Video [/videos/free/{id}]
A single video object for free video platform

+ Model (application/hal+json)
    HAL+JSON representation of Programme Resource. In addition to representing its state in the JSON form it offers affordances in the form of the HTTP Link header and HAL links.

    + Headers

            Location : /videos/free

    + Body
    
            {
                "id": 935214,
                "title": "",
                "subtitle": "",
                "description": "",
                "author": "canal+",
                "embed": "yes",
                "tv": {
                    "numaff": 132,
                    "numprog": 2453
                },
                "stream": [
                    {type: "hd", href:"rtmp://vod-fms.canalplus.fr/ondemand/videos/1309/LA_NOUVELLE_EDITION_TEMOIGNAGE_130913_CAN_362574_video_L.mp4"},
                    {type: "sd", href:"rtmp://vod-fms.canalplus.fr/ondemand/videos/1309/LA_NOUVELLE_EDITION_TEMOIGNAGE_130913_CAN_362574_video_L.mp4"},
                    {type: "hds", href:"http://us-cplus-aka.canal-plus.com/z/1309/LA_NOUVELLE_EDITION_TEMOIGNAGE_130913_CAN_362574_video_,MOB,L,H,HD,.mp4.csmil/manifest.f4m"},
                    {type: "hls", href:"http://us-cplus-aka.canal-plus.com/i/1309/LA_NOUVELLE_EDITION_TEMOIGNAGE_130913_CAN_362574_video_,MOB,L,H,HD,.mp4.csmil/master.m3u8"},
                ],
                "counters": {
                    "views": 10000121,
                    "fb_like": 1336543,
                    "tw_share": 1234554
                },
                "_links": {
                    "self": "/videos/free/4531132",
                    "urc": "/videos/free/gid=12/uid=13/rid=1/cid=2",
                    "_links.images.slug": {
                        "href": "http://media.canalplus.fr/{width}x{height}/{slug}{?-SMART}.{ext}",
                        "templated": "true"
                    }
                    "images": [
                        {
                            "href": "/ressources/images/12",
                            "slug": "legrandjournal_20131225",
                            "alt": "Stromae au Grand Journal du 25/12/2013"
                        },
                        {
                            "href": "/ressources/images/12",
                            "slug": "legrandjournal_20131225",
                            "alt": "Stromae au Grand Journal du 25/12/2013"
                        }
                },
                "created_at": "1977-04-22T06:00:00Z",
                "updated_at": "1977-04-22T06:00:00Z"
            }
            

### Get [GET] 
+ Parameters 
    + id (int) ... video ID.
    
+ Response 200 (application/hal+json)
       
    [Video][]


## Video listing [/videos/free/gid={gid}{/uid=uid}{/rid=rid}{/cid=cid}]
Listing of video category and video objects, find by GURC identifiers
### Get [GET] 
+ Parameters 
    + gid (int) ... Galaxy ID.
    + uid (optional,int) ... Universe ID.
    + rid (optional,int) ... Rubrique ID.
    + cid (optional,int) ... Category ID.

    
+ Response 200 (application/hal+json)
       
        {
            "id": "42",
            "title": "Fight Club",
            "_links": {
                "self": {
                    "href": "/videos/free/gid=42/uid=12/rid=34"
                },
                "child": [
                    {
                        "href": "/videos/free/gid=42/rid=34/cid=12",
                        "title": "Bande Annonce"
                    },
                    {
                        "href": "/videos/free/gid=42/rid=34/cid=14",
                        "title": "Extrait"
                    }
                ],
                "parent": [
                    {
                        "href": "/videos/free/gid=42/uid=12",
                        "title": "Cinema"
                    },
                    {
                        "href": "/videos/free/gid=42",
                        "title": "WWWPLUS"
                    }
                ],
                "videos": [
                    {
                        "href": "/videos/free/4531132",
                        "title": "Le Grand Journal du 15/10/1201"
                    },
                    {
                        "href": "/videos/free/4531112",
                        "title": "L'instant Barré"
                    }
                ]
            }
        }

## Video Collection Listing [/videos/free/gid={gid}/selections/]
Lit all collections of video


### Get [GET] 
+ Parameters 
    + gid (int) ... Galaxy ID.


+ Response 200 (application/hal+json)
       
        {
            "_links": [
                {
                    "href": "/videos/free/gid=12/selections/12",
                    "title": "C+ - AD fin du Monde"
                },
                {
                    "href": "/videos/free/gid=12/selections/14",
                    "title": "C+ - Zapping"
                }
            ]
        }

## Video Collection [/videos/free/gid={gid}/selections/{id}]
Listing of video selection list, 



### Get [GET] 
+ Parameters 
    + gid (int) ... Galaxy ID.
    + id (int) ... Selection ID.

+ Response 200 (application/hal+json)
       
            {
                "id": 12,
                "title": "C+ - AD fin du Monde",
                "sort": {
                    "date": "asc",
                    "hour": "desc",
                    "view": "asc"
                },
                "_links": {
                    "self": "/videos/free/galaxy=12/selections/12",
                    "urc": [
                        {
                            "href": "/videos/free/gid=12/u=13/r=14/c=5",
                            "title": "Scandal - BA"
                        },
                        {
                            "href": "/videos/free/gid=12/u=13/r=14",
                            "title": "meteo de doria"
                        }
                    ],
                    "video": [
                        {
                            "href": "/videos/free/125",
                            "title": "Meteo de Doria du 12/01/123"
                        }
                    ]
                }
            }


# Group Ressource
Media Ressources

## Ressource [/resources/]

+ Model (application/hal+json)
    HAL+JSON representation. In addition to representing its state in the JSON form it offers affordances in the form of the HTTP Link header and HAL links.

    + Headers

            Location : /resources

    + Body
    
            {
                "id": 935214,
                "slug": "walter-white"
                "resource_type": "image",
                "format": "jpg"
                "created_at": "2012-03-29T09:32:59Z",
                "width": 283,
                "height": 424,
                "author": "canal+",
                "_links": {
                    "self": "/ressources/935214",
                    "category": [
                        {"href": "/category/12", "title": "lgj"},
                        {"href": "/category/14", "title": "lpj"},
                    ],
                "slug": {
                        "href": "http://media.canalplus.fr/{width}x{height}/{slug}{?-SMART}.{ext}",
                        "templated": "true"
                    }
                },
                "created_at": "1977-04-22T06:00:00Z",
                "updated_at": "1977-04-22T06:00:00Z"
            }

### Search [GET] 
+ Response 200 (application/hal+json)
       
        {
            "_links": [
                {
                    "href": "/ressources/935214",
                    "title": "Walter White"
                },
                {
                    "href": "/ressources/44",
                    "title": "Jessica Ramirez"
                }
            ]
        }

### Create [POST] 
1. Client -> Rest Service : Post the metadata first to create the ressource object.
1. Rest Service -> Client : Return an ID. 
1. Client -> Rest Service : sends the file to `/ressources/{id}/content`, and the server re-associates the file and the metadata.

+ Response 200 (application/hal+json)
       
    [Ressource][]

## Ressource File [/resources/{id}/content]

### Upload [POST]  
+ Request (multipart/form-data, boundary=AaB03x)
    
    + Headers
        
            Content-Length: $requestlen
    
    + Body
            
            --AaB03x
            content-disposition: form-data; name="userfile"; filename="$filename"
            Content-Type: $mimetype
            Content-Transfer-Encoding: binary
            
            $binarydata
            --AaB03x--
 
+ Response 201 (application/json)

        {"message":"File Uploaded and Linked","code": 200}


## Ressource [/resources/{id}]

### Get [GET] 
+ Parameters 
    + id (int) ... ressources ID.
    
+ Response 200 (application/hal+json)
       
    [Ressource][]

### Update [POST] 
+ Parameters 
    + id (int) ... ressources ID.
    
+ Response 200 (application/hal+json)
       
    [Ressource][]

### Delete [DELETE]

+ Response 204 

